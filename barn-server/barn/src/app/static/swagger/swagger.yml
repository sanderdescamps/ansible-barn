openapi: 3.0.0
info:
  title: Barn
  description: Dynamic inventory for Ansible
  version: 1.1.0
servers:
  - url: /
paths:
  /login:
    get:
      summary: Login into Barn
      security:
        - basicAuth: []
      responses:
        "200":
          description: Successfull login
  /api/v1/admin/register:
    get:
      summary: Register new user
      responses:
        "200":
          description: OK
  /api/v1/ansible_inventory:
    get:
      summary: Return an json Ansible inventory file
      description: |
        Alias: 
          - https://{hostname}:{port}/ansible_inventory
          - https://{hostname}:{port}/inventory_file
      responses:
        "200":
          description: OK
          content: 
            application/json:
                  schema:
                    type: object
  /upload:
    get:
      summary: Upload web page 
      responses:
        "200":
          description: OK
          content: 
            text/html:
              schema:
                type: string
    post:
      summary: Send file and import it in Barn
      requestBody:
        required: True
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content: 
            application/json:
                  schema:
                    type: object
  /api/v1/admin/export:
    get:
      summary: Export current hosts and groups
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
            - yaml
            - yml
            - json
        required: false
        example: json
        description: output format of the export
      - in: query
        name: file
        schema:
          type: boolean
        required: false
        example: false
        description: if True, in a browser you will imidiatly download the file
      responses:
        "200":
          description: OK
          content: 
            application/json:
                  schema:
                    type: object
  /api/v1/inventory/nodes:
    $ref: "./nodes.yml"
  /api/v1/inventory/hosts:
    $ref: "./hosts.yml"
  /api/v1/inventory/hosts/{action}:
    $ref: "./hosts_put.yml"
  /api/v1/inventory/groups:
    $ref: "./groups.yml"
  /api/v1/admin/users:
    $ref: "./users.yml#/users"
  /api/v1/admin/users/{action}:
    $ref: "./users.yml#/users_put"
  /api/v1/users/token:
    $ref: "./users.yml#/token"
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    DefaultResponse:
      description: Default response with results
      content: 
        application/json:
              schema:
                type: object
                properties:
                  changed:
                    type: boolean
                    default: false
                    description: True when a change has been made inside Barn
                  failed:
                    type: boolean
                    default: false
                    description: True when error occured
                  msg:
                    type: string
                    default: ""
                    description: Main message which provides more details about the status
                  msg_list:
                    type: array
                    items:
                      type: string
                    default: []
                    description: List of all messages, the main message will be set in the 'msg' field
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                    description: List of results
    UnauthorizedError:
      description: Unautorized request
      content:
        application/json:
          schema:
            type: object
            properties:
              failed:
                type: boolean
                default: true
                description: True when error happens
              msg:
                type: string
                description: Error message if something went wrong


  schemas:
    Node:
      oneOf:
        - $ref: '#/components/schemas/Host'
        - $ref: '#/components/schemas/Group'
    Host:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: 
            - "host"
        vars:
          type: object
    Group:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: 
            - "group"
        vars:
          type: object
        child_groups:
          type: array
          description: List of groupnames
          items: 
            type: string
        hosts:
          type: array
          description: List of hostnames
          items: 
            type: string
